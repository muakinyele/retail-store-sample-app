name: Terraform Deploy

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1
  TERRAFORM_DIR: terraform
  TF_BACKEND_BUCKET: innovate-mart
  TF_BACKEND_DYNAMODB: innovatemart-terraform-locks
  TF_STATE_KEY: infra/terraform.tfstate

jobs:
  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-terraform-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Initialize Terraform
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DYNAMODB}"

      - name: Clear stale locks if any
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          echo "üîç Checking for stale Terraform state locks..."
          LOCK_ID=$(aws dynamodb scan \
            --table-name $TF_BACKEND_DYNAMODB \
            --filter-expression "LockID = :lockid" \
            --expression-attribute-values '{":lockid": {"S":"${TF_BACKEND_BUCKET}/${TF_STATE_KEY}"}}' \
            --query "Items[0].LockID.S" \
            --output text 2>/dev/null || true)
          
          if [ "$LOCK_ID" != "None" ] && [ -n "$LOCK_ID" ]; then
            echo "‚ö†Ô∏è Found stale lock. Removing it..."
            aws dynamodb delete-item \
              --table-name $TF_BACKEND_DYNAMODB \
              --key "{\"LockID\": {\"S\": \"${TF_BACKEND_BUCKET}/${TF_STATE_KEY}\"}}"
          else
            echo "‚úÖ No stale locks found."
          fi

      - name: Terraform Format Check
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform plan -no-color -out=tfplan

      - name: Terraform Apply (Skip Existing Resources)
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true
        run: |
          set -euo pipefail
          echo "üöÄ Applying Terraform plan..."
          terraform apply -auto-approve tfplan || {
            echo "‚ö†Ô∏è Non-fatal: some resources already exist (skipped safely)."
          }

      - name: Check Apply Result
        if: failure()
        run: |
          echo "‚úÖ Terraform apply completed with handled 'already exists' errors."
