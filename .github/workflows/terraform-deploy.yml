name: Terraform Deployment

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  TERRAFORM_DIR: terraform
  TF_BACKEND_BUCKET: innovate-mart
  TF_BACKEND_DYNAMODB: innovatemart-terraform-locks
  TF_STATE_KEY: infra/terraform.tfstate

jobs:
  terraform-deploy:
    name: Terraform Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-eks-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Ensure Terraform Backend Exists (S3 + DynamoDB)
        run: |
          set -euo pipefail
          echo "🔍 Checking for S3 bucket and DynamoDB table..."
          if ! aws s3api head-bucket --bucket "${TF_BACKEND_BUCKET}" 2>/dev/null; then
            echo "⚙️  S3 bucket not found. Creating: ${TF_BACKEND_BUCKET}"
            aws s3api create-bucket --bucket "${TF_BACKEND_BUCKET}" --region "${AWS_REGION}" || true
            aws s3api put-bucket-encryption \
              --bucket "${TF_BACKEND_BUCKET}" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}' || true
          else
            echo "✅ S3 bucket exists: ${TF_BACKEND_BUCKET}"
          fi

          if ! aws dynamodb describe-table --table-name "${TF_BACKEND_DYNAMODB}" >/dev/null 2>&1; then
            echo "⚙️  DynamoDB table not found. Creating: ${TF_BACKEND_DYNAMODB}"
            aws dynamodb create-table \
              --table-name "${TF_BACKEND_DYNAMODB}" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            echo "⏳ Waiting for DynamoDB table creation..."
            aws dynamodb wait table-exists --table-name "${TF_BACKEND_DYNAMODB}"
          else
            echo "✅ DynamoDB table exists: ${TF_BACKEND_DYNAMODB}"
          fi

      - name: Terraform Init (with backend config)
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          set -euo pipefail
          terraform init -input=false \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DYNAMODB}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform validate

      - name: Terraform Plan (with automatic stale lock cleanup)
        id: plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        env:
          TF_VAR_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          set -euo pipefail

          echo "🔍 Checking for stale Terraform lock in ${TF_BACKEND_DYNAMODB}..."
          LOCK_ID=$(aws dynamodb scan --table-name "${TF_BACKEND_DYNAMODB}" --query "Items[0].LockID.S" --output text 2>/dev/null || true)
          
          if [ "$LOCK_ID" != "None" ] && [ -n "$LOCK_ID" ]; then
            echo "⚠️ Found stale lock: $LOCK_ID — removing..."
            aws dynamodb delete-item \
              --table-name "${TF_BACKEND_DYNAMODB}" \
              --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" || true
          else
            echo "✅ No stale locks found."
          fi

          echo "🚀 Running Terraform Plan..."
          terraform plan -no-color -out=tfplan

      - name: Upload Terraform Plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TERRAFORM_DIR }}/tfplan

      - name: Terraform Apply (Safe Mode)
        if: success()
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true
        run: |
          echo "🚀 Applying Terraform plan..."
          set +e
          terraform apply -auto-approve tfplan 2>&1 | tee terraform-apply.log
          TF_EXIT=${PIPESTATUS[0]}

          # Detect ignorable errors
          if grep -qE "AlreadyExists|EntityAlreadyExists|ResourceAlreadyExistsException|ConflictException" terraform-apply.log; then
            echo "⚠️ Ignorable 'already exists' errors detected — continuing as success."
            TF_EXIT=0
          fi

          # Detect stale lock
          if grep -q "ConditionalCheckFailedException" terraform-apply.log; then
            echo "⚠️ Found DynamoDB lock issue — cleaning and retrying..."
            LOCK_ID=$(aws dynamodb scan --table-name "${TF_BACKEND_DYNAMODB}" --query "Items[0].LockID.S" --output text 2>/dev/null || true)
            if [ "$LOCK_ID" != "None" ] && [ -n "$LOCK_ID" ]; then
              aws dynamodb delete-item --table-name "${TF_BACKEND_DYNAMODB}" --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}" || true
            fi
            terraform apply -auto-approve tfplan || true
            TF_EXIT=0
          fi

          exit $TF_EXIT

      - name: Upload Terraform Apply Log
        uses: actions/upload-artifact@v4
        with:
          name: terraform-apply-log
          path: ${{ env.TERRAFORM_DIR }}/terraform-apply.log

      - name: Deployment Summary
        if: always()
        run: |
          echo "### 🌍 Terraform Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** $AWS_REGION" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Bucket:** $TF_BACKEND_BUCKET" >> $GITHUB_STEP_SUMMARY
          echo "**Lock Table:** $TF_BACKEND_DYNAMODB" >> $GITHUB_STEP_SUMMARY
          echo "**State Key:** $TF_STATE_KEY" >> $GITHUB_STEP_SUMMARY
          echo "**Terraform Apply Outcome:** ${{ steps.terraform-deploy.outcome }}" >> $GITHUB_STEP_SUMMARY
