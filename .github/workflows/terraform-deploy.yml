name: Terraform Deploy

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_DEFAULT_REGION: us-east-1
  TERRAFORM_DIR: terraform
  TF_BACKEND_BUCKET: innovate-mart
  TF_BACKEND_DYNAMODB: innovatemart-terraform-locks
  TF_STATE_KEY: infra/terraform.tfstate

jobs:
  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-terraform-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${TF_BACKEND_BUCKET}" \
            -backend-config="key=${TF_STATE_KEY}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_BACKEND_DYNAMODB}"

      - name: Clear stale locks if any
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          echo "🔍 Checking for stale Terraform state locks..."
          LOCK_KEY="${TF_BACKEND_BUCKET}/${TF_STATE_KEY}"
          LOCK_FOUND=$(aws dynamodb get-item \
            --table-name $TF_BACKEND_DYNAMODB \
            --key "{\"LockID\": {\"S\": \"$LOCK_KEY\"}}" \
            --query "Item.LockID.S" \
            --output text 2>/dev/null || true)

          if [[ "$LOCK_FOUND" != "None" && -n "$LOCK_FOUND" ]]; then
            echo "⚠️ Found stale lock for $LOCK_KEY — removing..."
            aws dynamodb delete-item \
              --table-name $TF_BACKEND_DYNAMODB \
              --key "{\"LockID\": {\"S\": \"$LOCK_KEY\"}}"
          else
            echo "✅ No stale locks found."
          fi

      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform plan -no-color -out=tfplan

      - name: Terraform Apply (Safe Mode)
        id: apply
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true
        run: |
          echo "🚀 Running Terraform apply with safe handling..."
          set +e
          terraform apply -auto-approve tfplan 2>&1 | tee terraform-apply.log
          TF_EXIT=${PIPESTATUS[0]}

          # Detect ignorable errors (duplicates or existing resources)
          if grep -qE "AlreadyExists|EntityAlreadyExists|ResourceAlreadyExistsException" terraform-apply.log; then
            echo "⚠️ Detected existing resources — safe to ignore."
            TF_EXIT=0
          fi

          # Detect stale lock scenario
          if grep -q "ConditionalCheckFailedException" terraform-apply.log; then
            echo "⚠️ Detected DynamoDB lock issue — cleaning and reapplying once..."
            LOCK_KEY="${TF_BACKEND_BUCKET}/${TF_STATE_KEY}"
            aws dynamodb delete-item \
              --table-name $TF_BACKEND_DYNAMODB \
              --key "{\"LockID\": {\"S\": \"$LOCK_KEY\"}}"
            terraform apply -auto-approve tfplan
            TF_EXIT=$?
          fi

          exit $TF_EXIT

      - name: Upload Apply Log
        uses: actions/upload-artifact@v4
        with:
          name: terraform-apply-log
          path: ${{ env.TERRAFORM_DIR }}/terraform-apply.log

      - name: Deployment Summary
        if: always()
        run: |
          echo "### 🌍 Terraform Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** $AWS_REGION" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Bucket:** $TF_BACKEND_BUCKET" >> $GITHUB_STEP_SUMMARY
          echo "**Lock Table:** $TF_BACKEND_DYNAMODB" >> $GITHUB_STEP_SUMMARY
          echo "**State Key:** $TF_STATE_KEY" >> $GITHUB_STEP_SUMMARY
          echo "**Apply Exit Code:** ${{ steps.apply.outcome }}" >> $GITHUB_STEP_SUMMARY
